spring.application.name=order-service

server.port=8082

# default is 5432 for postgres
# docker network-connections
spring.datasource.url=jdbc:postgresql://postgres-order:5433/order-service

# for container based connections
#spring.datasource.url=jdbc:postgresql://host.docker.internal:5431/order-service

spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# none, validate, update, create, create-drop
# Options for controlling how Hibernate handles schema management
# none: No schema generation or validation is performed.
# none because we will be using flyaway
spring.jpa.hibernate.ddl-auto=none

# validate: Hibernate will validate the schema against the database without making any changes.
# This is useful to ensure that the database structure matches the entity mappings.
# Validation failure will throw an error.
#spring.jpa.hibernate.ddl-auto=validate

# update: Hibernate will modify the database schema to match the entity mappings.
# Only adds missing columns and tables, but does not remove anything.
# This is useful for iterative development but should be avoided in production.
#spring.jpa.hibernate.ddl-auto=update

# create: Hibernate will drop the existing schema and recreate it every time the application starts.
# This is useful during development but should not be used in production environments as it will
# erase all data on each startup.
#spring.jpa.hibernate.ddl-auto=create

# create-drop: Similar to "create", but in addition, it will drop the schema when the application stops.
# It's useful for integration tests where the schema only needs to exist for the duration of the app run.
#spring.jpa.hibernate.ddl-auto=create-drop

inventory.service.url=http://inventory-service:8083

